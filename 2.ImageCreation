Introduction
    Create own container images
    Package an existing application
    Build a new one from scratch leveraging Docker
    Build Docker-file let Docker build the image automatically
    * Practices to opimize this Dockerfile 
    * Vagrant overview
    * Packer overview
    * Docker Hub - application store
    * Images on Docker Hub can be shared publicly and they can also be built automatically
    through intergration with code hosting services like Github and Bitbucket
    * Deploy your own Docker images registry and set up your own automated build
2.1 Keeping changes Madeto a container by committing to an Image 

Problem: After making some change 
$ docker run -t -i ubuntu:18.04 /bin/bash

$ docker commit <container id> 

$ docker commit 
$ docker diff

2.2. Saving Images and Containers as Tar Files for Sharing

$ docker ps -a
$ docker export <contaner id> > update.tar
$ docker import - update < update.tar \\ create new image
$ docker images \\ show images
$ docker save -o update1.tar update
$ ls -l
$ docker rmi update
$ docker load < update1.tar
$ docker images

2.3 Writing Your First Dockerfile

$ docker build.
$ docker images
$ docker run <imageID>  Hi Docker!
$ docker run <imageID>
$ docker build -t cookbook:hello .
$ docker images
$ docker build -h

2.4 Packaging a Flask Application Inside a Container

    Dockerfile content:
    FROM ubuntu:14.04
        RUN apt-get update
        RUN apt-get install -y python
        RUN apt-get install -y python-pip
        RUN apt-get clean all
        
        RUN pip install flask
        
        ADD hello.py /tmp/hello.py
        
        EXPOSE 5000
        
        CMD ["python", "/tmp/hello.py"]
    
$ docker  build -t flask .
$ docker  images
$ docker  run -d -P flask
$ docker ps
$ docker run -t -t -P flask /bin/bash
        

2.5 Optimizing Your Dockerfile by Following Best Practice

2.6 Versioning an Images with Tags

2.7 Migrating from Vagrant to Docker with the Docker Provider

2.8 Using Packer to Create a Docker Image

2.9 Publishing Your Image to Docker Hub

2.10 Using ONBUILD Images

2.11 Running a Private Registery

2.12 Setting Up an Automated Build on docker hub for continuous Integration/Deployment

2.13 Setting Up a Local Automated Build by Using a Git Hook and a Private Registry

2.14 Using Conduit for Continuous Deployment




